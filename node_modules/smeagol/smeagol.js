// Smeagl, nodeJS crawler to get content in HTML pages


module.paths.unshift('/usr/local/lib/node_modules/');

var fs = require('fs'),
	jsdom = require('jsdom');

var settings,
	crawled,
	toCrawl,
	result,
	counter = 0;

exports.configure = function(config){
	settings = config,
	crawled = [],
	toCrawl = [],
	result = {
		contents : {}
	};
}

exports.crawl = function(obj){

	console.log('Crawl: '+obj.uri);

	if(settings.log == true){
		log = fs.createWriteStream('smeagol-log.txt', {'flags': 'a'});
		log.write(obj.uri+'\r\n');
	}

	jsdom.env(
	  obj.uri,
	  ['http://code.jquery.com/jquery.js'],
	  function (errors, window) {
	    
	    /* Get links to continuous crawling */
	    if(settings.continuous){

		    window.$('a').each(function(index){
		    	var url = window.$(this).attr('href');

		    	if(typeof(url) == 'string'){
			    	if(url.substring(0,1) == '/'){
			    		url = settings.domain + url;
			    	}

			    	if(toCrawl.indexOf(url) < 0 && crawled.indexOf(url) < 0){
						var re = new RegExp('^' + settings.pattern_to_crawl + '$','gi');

			    		if(validUrl && re.exec(url)){
			    			toCrawl.push(url);	
			    		}else{
			    			// console.log('Invalid: '+url);
			    		}
			    		
			    	}
		    	}
		    });
	    }

	    /* Verify URL patterns */
		for(var i in settings['patterns']){
			var page_properties = settings['patterns'][i],
				re = new RegExp('^' + i + '$','gi');

			/* Get HTML contents */
			if(re.exec(obj.uri)){
				var contents = settings['patterns'][i]['find'];

				if(!result.contents[page_properties.id]){
					result.contents[page_properties.id] = {};
				}

				if(!result.contents[page_properties.id][obj.uri]){
					result.contents[page_properties.id][obj.uri] = {}
				}

				/* Create result object */
				for(var find in contents){
					result.contents[page_properties.id][obj.uri][find] = eval('window.$'+contents[find]);
				}

			}
		}

	    /* Add to crawled urls */
	    crawled.push(obj.uri);
	    result.crawled = crawled;

	    if (toCrawl.indexOf(obj.uri) >= 0){
	    	toCrawl.splice(toCrawl.indexOf(obj.uri), 1);
	    }

		if(settings.continuous == true && toCrawl.length > 0){
			module.exports.crawl({
				uri : toCrawl[0]
			});

			// console.log(module.exports.crawl);

		}else{
			if(typeof(settings.callback) == 'function'){
				settings.callback(result);
			}
			return result;
		}

		
	  }
	);
}

function validUrl(url){
    var urlregex = new RegExp("^(http:\/\/www.|https:\/\/www.|ftp:\/\/www.|www.){1}([0-9A-Za-z]+\.)");
    if (urlregex.test(url)) {
        return true;
    }
    return false;
}